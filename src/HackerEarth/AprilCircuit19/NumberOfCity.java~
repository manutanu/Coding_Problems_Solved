import java.util.*;
import java.io.*;

class NumberOfCity{
	static InputReader bf=new InputReader(System.in);
	static PrintWriter out=new PrintWriter(System.out);
	static StringBuilder finalprint=new StringBuilder("");
	static int[][] arr;
	static boolean[][] visited ;
	static char[][] chararray;
	static int[][] level ;
	static int N;
	static int M;
	static int max;
	static int min=Integer.MAX_VALUE;
	static PriorityQueue pr=new PriorityQueue();
	public static void main(String args[])throws Exception{
	N=bf.nextInt();
	M=bf.nextInt();
	int Ax=bf.nextInt();
	int Ay=bf.nextInt();
	
	arr=new int[N+1][M+1];
	for (int i=1;i<=N;i++){
		for(int j=1;j<=M;j++){
			arr[i][j]=Integer.MAX_VALUE;
		}
	}
	
	/*
	for (int i=1;i<=N;i++){
		for(int j=1;j<=M;j++){
			System.out.print(arr[i][j]+" ");
		}
		System.out.println();
	}*/
	
	chararray=new char[N+1][(2*M)+1];
	for(int i=0;i<=N;i++){
		String s=bf.nextLine();
		for(int j=0;j<(2*M);j++){
			//System.out.println((N+1)+" "+((2*M)+1)+" "+M+" "+N+" "+i+" "+j);
			chararray[i][j]=s.charAt(j);
		}
	}
	/*
	for(int i=0;i<=N;i++){
		for(int j=0;j<=(2*M);j++){
			System.out.print(chararray[i][j]);
		}
		System.out.println();
	} */
	
	int Q=bf.nextInt();
	while(Q-->0){
	int src=bf.nextInt();
	int des=bf.nextInt();
	visited=new boolean[N+1][M+1];
	level=new int[N+1][M+1];
	Queue<Integer> xq=new LinkedList<>();
	xq.add(src);
	Queue<Integer> yq=new LinkedList<>();
	yq.add(des);
	level[src][des]=0;
	max=Integer.MIN_VALUE;
	bfsForMatrixFill(src,des,xq,yq);
	//System.out.println("");
	if(min>max)
		min=max;
	}
	
	out.println(min);
	out.close();
	}
	
	
	public static void bfsForMatrixFill(int x,int y,Queue xq,Queue yq){
		
		
		while(!xq.isEmpty() && !yq.isEmpty()){
			int xx=(int)xq.poll();
			int acy=(int)yq.poll();
			
			int yy=((acy*2)-1);
			//System.out.println("hellow "+arr[xx][acy]);
			
			//System.out.println(xx+" "+acy+" "+(acy+1)+" "+chararray[xx][yy+1]+"s "+((acy+1)<=M)+" "+M);
			
			if(arr[xx][acy]>level[xx][acy]){
				arr[xx][acy]=level[xx][acy];
				
			}
			//System.out.println("hellow ");
			//right movement x+1, y
			if((acy+1)<=M && (chararray[xx][yy+1]!='|') && visited[xx][acy+1]==false){
			//	System.out.println("here 1");
				visited[xx][acy+1]=true;
				level[xx][acy+1]=level[xx][acy]+1;
				xq.add(xx);
				yq.add(acy+1);
				//bfsForMatrixFill(xx,acy+1,xq,yq,value+1);
			}
				
			//left mevement
			if((acy-1)>0 && (chararray[xx][yy-1]!='|') && visited[xx][acy-1]==false){
				//System.out.println("here 2");
				visited[xx][acy-1]=true;
				level[xx][acy-1]=level[xx][acy]+1;
				xq.add(xx);
				yq.add(acy-1);
				//bfsForMatrixFill(xx,acy-1,xq,yq,value+1);
			}
			
			//up movement 
			if(xx>0 && (chararray[xx-1][yy]!='_') && visited[xx-1][acy]==false){
					//		System.out.println("here 3");
				visited[xx-1][acy]=true;
				level[xx-1][acy]=level[xx][acy]+1;
				xq.add(xx-1);
				yq.add(acy);
				//bfsForMatrixFill(xx-1,acy,xq,yq,value+1);
			}
			
			//down movement
			if(xx<=N && (chararray[xx][yy]!='_') && visited[xx+1][acy]==false){
				//			System.out.println("here 4");
				visited[xx+1][acy]=true;
				level[xx+1][acy]=level[xx][acy]+1;
				xq.add(xx+1);
				yq.add(acy);
				//bfsForMatrixFill(xx+1,acy,xq,yq,value+1);
			}
			
			if(max<arr[xx][acy])
					max=arr[xx][acy];
				//System.out.println(xx+" "+acy+" "+maxinmin+" "+arr[xx][acy]);
			
		}
		
		
		
	}
}


//Fast IO

class InputReader{

	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar;
	private int numChars;
	private SpaceCharFilter filter;

	public InputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1) {
			throw new InputMismatchException();
		}

		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}

			if (numChars <= 0) {
				return -1;
			}
		}
		return buf[curChar++];
	}

	public String nextLine() {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String str = "";
		try {
			str = br.readLine();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return str;
	}

	public int nextInt() {
		int c = read();

		while (isSpaceChar(c)) {
			c = read();
		}

		int sgn = 1;

		if (c == '-') {
			sgn = -1;
			c = read();
		}

		int res = 0;
		do {
			if (c < '0' || c > '9') {
				throw new InputMismatchException();
			}
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));

		return res * sgn;
	}

	public long nextLong() {
		int c = read();
		while (isSpaceChar(c)) {
			c = read();
		}
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		long res = 0;

		do {
			if (c < '0' || c > '9') {
				throw new InputMismatchException();
			}
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public double nextDouble() {
		int c = read();
		while (isSpaceChar(c)) {
			c = read();
		}
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		double res = 0;
		while (!isSpaceChar(c) && c != '.') {
			if (c == 'e' || c == 'E') {
				return res * Math.pow(10, nextInt());
			}
			if (c < '0' || c > '9') {
				throw new InputMismatchException();
			}
			res *= 10;
			res += c - '0';
			c = read();
		}
		if (c == '.') {
			c = read();
			double m = 1;
			while (!isSpaceChar(c)) {
				if (c == 'e' || c == 'E') {
					return res * Math.pow(10, nextInt());
				}
				if (c < '0' || c > '9') {
					throw new InputMismatchException();
				}
				m /= 10;
				res += (c - '0') * m;
				c = read();
			}
		}
		return res * sgn;
	}

	public String readString() {
		int c = read();
		while (isSpaceChar(c)) {
			c = read();
		}
		StringBuilder res = new StringBuilder();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));

		return res.toString();
	}

	public boolean isSpaceChar(int c) {
		if (filter != null) {
			return filter.isSpaceChar(c);
		}
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	public String next() {
		return readString();
	}

	public interface SpaceCharFilter {

		public boolean isSpaceChar(int ch);
	}
}

